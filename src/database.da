import sys, os, json

config(clock='Lamport')
config(channel='fifo')
TIMEOUT = 1

class Database(process):
    def setup(data_file: str):
        self.attributeStore = dict()
        self.attributeStore["resources"] = dict()
        self.attributeStore["subjects"] = dict()
        self.attributeStore["subjects"]["version"] = dict()
        self.attributeStore["resources"]["version"] = dict()
        # check error in loading pre init config file for the database
        if getDataFromFile() == False:
            sys.exit(-1)
        # output(self.attributeStore)

    def create_new_version(msg):
#    /* to create a new dict element , versions and return it.*/
        v = dict()    
        v["v_ts"] = msg.timestamp  
        if(msg.worker_attr.get_updated_attr_sub() != None):            
            for k, val in msg.worker_attr.updated_attr_sub.items(): 
                v[k] = val;
        else:  # res updated
            for k, val in msg.worker_attr.updated_attr_res.items(): 
                v[k] = val;


    def handleupdate(msg):
        # need to write the received update to db..
        output("Database: Database received write request to update attributes for Id:",msg.subj_id)

#   /*check if sub has updated or res*/
        v = create_new_version(msg)

        if(msg.worker_attr.get_updated_attr_sub() != None):
            item = self.attributeStore["resources"].get(msg.sub_id)
            item.[versions].append(v)
        else:
            self.attributeStore["resources"].get(msg.sub_id)
            item.[versions].append(v)
        output("Database: Database write request completed for Id:",msg.subj_id)
        

    def handleQuery(msg):
        # read msg query , fetch from dicts and send back a reply to the node which sent the query(how to get target node??)
        output("Database: Received a query for with ts :", msg.subj_id,msg.timeStamp)
        item = self.attributeStore["subjects"].get(msg.subj_id)
        output("item in database is ", item)
        #for version in item.items():
        version_list = list(item.items())
        for i in xrange(len(version_list)):
            ts = version_list[i].get("v_ts")
            index = i
            if(ts > msg.timeStamp):
                break
        if (version_list[i] != None):
            msg.db_attr.set_sub_attr(version_list[i])

        item = self.attributeStore["resources"].get(msg.res_id)
        output("item in database is ", item)
        #for version in item.items():
        version_list = list(item.items())
        for i in xrange(len(version_list)):
            ts = version_list[i].get("v_ts")
            index = i
            if(ts > msg.timeStamp):
                break
        if (version_list[i] != None):
            msg.db_attr.set_res_attr(version_list[i])

        output("item in database is ", item)    
        send(('reply_db_read', msg), to=msg.curr_curr_coordinator)
        output("Database : Message sent to curr_coordinator back after database fetch")

    def run():
        while True:
            #clk = logical_clock()
            if (await(some(received(('req_db_read', msg))))):
                pass
                #print("database received a msg to read")
                #handleQuery(msg)
            elif (some(received(('req_db_write', msg)))):
                pass
                #print("database received a msg to write")
                #handleupdate(msg)
            elif timeout(TIMEOUT * 10):
                pass

    def receive(msg=(a, b)):
        if a == "req_db_read":
            handleQuery(b)
        elif a == "req_db_write":
            handleupdate(b)

    def getDataFromFile():
        if not os.path.exists(data_file):
            output("Database: preInit Config file %s not found" % data_file)
            return -1
        try:
            fileData = json.loads(open(data_file).read())
            output("Database: Loading entries in JSon file to local memory to simulate DB")
            for subjects in fileData.get("subjects"):
                item = subjects.get("id")
                self.attributeStore["subjects"][item] = dict()
                for versions in item.get("v_ts"):
                    self.attributeStore["subjects"][item][versions] = dict
                    for k, v in versions.items():
                        if k != "v_ts":
                            self.attributeStore["subjects"][item][versions][k] = v

            for resources in fileData.get("resources"):
                item = resources.get("id")
                self.attributeStore["resources"][item] = dict()
                for versions in item.get("v_ts"):
                    self.attributeStore["resources"][item][versions] = dict
                    for k, v in resources.items():
                        if k != "v_ts":
                            self.attributeStore["resources"][item][versions][k] = v
            output("Loading Datasbe entries in JSon file complete, DB Simulator Ready")
            return True

        except:
            output("Database: Json file not in correct syntax")
            return False
