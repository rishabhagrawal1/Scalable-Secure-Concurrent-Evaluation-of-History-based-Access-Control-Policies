import random, time, sys
import version
import staticAnalysis
sys.path.insert(0, '../config')
import config
w = import_da("worker")
from request import Request
config(clock = 'Lamport')
config(channel = 'fifo')
MAXDBLatency = 0.1
MINDBLatency = 0.01
TIMEOUT = 1

class Coordinator(process):
    def setup(config: Config, coord_list: list, worker_count: int, data: object, work_list: list, sta: object):
        work = new(w.Worker, num=config.num_workers)
        setup(work, (coord_list, config))
        start(work)
        work_list = list(work)
        ## Dictionary of attribute versions to be used in latestVersion and latestVersionBefore Key used is subject/resource Id + '_' + attr
        self.attrVersionDict = {}
        ## All read requestes which are conflicting with current running write requests will be stored in this
        self.pendingReadReq = {}
        ## All current Write requests with workers will be stored here
        self.currRunningWriteReq = {}
        sta = staticAnalysis.StaticAnalysis(config.attr_file, coord_list)
        self.common = None

    def now():
        return time.time()

    ##Need to be called if not all attributes are available in cache at co-ordinator     
    def send_attr_read_request_to_attr_database(req):
        req.curr_coordinator = self.id
        output("Coordinator: sending attribute read request to DB")
        send(('req_db_read', req), to=data)

    def update_db_result_with_catched(req):
        #print("update_db_result_with_catched entry")
        output("Coordinator: extract catched and database fetched attributes for use by evaluator worker")
        catched_sub_attr = req.catched_attr.get_sub_attr()
        catched_res_attr = req.catched_attr.get_res_attr()
        db_sub_attr = req.db_attr.get_sub_attr()
        db_res_attr = req.db_attr.get_res_attr()
        print("db sub",db_sub_attr)
        print("db res",db_res_attr)
        if (len(catched_sub_attr) > 0):
            for k, v in catched_sub_attr.items():
                print (k, v)
                if k in db_sub_attr:
                    req.db_attr.get_sub_attr()[k] = v
        if (len(catched_res_attr) > 0):
            for k, v in catched_res_attr.items():
                            print (k, v)
                if k in db_res_attr:
                    req.db_attr.get_res_attr()[k] = v

        ##Set everything in catched attributes now and update the local catch as well
        req.catched_attr.set_sub_attr(req.db_attr.get_sub_attr())
        req.catched_attr.set_res_attr(req.db_attr.get_res_attr())
        print("catched sub", req.catched_attr.get_sub_attr())
        print("catched res",req.catched_attr.get_res_attr())
        ## Update the catch ##
        x = staticAnalysis.Obj(req.subj_id, 'sub')
        for k, v in req.catched_attr.get_sub_attr().items():
            print("adding version for", k, v)
            print(createVersionForPreviousSessionRead(x, k, v).val)
        x = staticAnalysis.Obj(req.res_id, 'res')
        for k, v in req.catched_attr.get_res_attr().items():
            print("adding version for", k, v)
            print(createVersionForPreviousSessionRead(x, k, v).val)
        print(attrVersionDict)
        print("after db read", req.catched_attr.get_sub_attr())
        print("after db read", req.catched_attr.get_res_attr())
        output("Coordinator:Attribute set ready for evaluation req id is ")

    def latestVersionBefore(x, attr, ts):
        aIdx = x.id+'_'+attr
        #print("latestVersionBefore")
        #scan attrVersionDict from end  to check for the highest TS with TS value less than passed TS.
        if(aIdx in attrVersionDict):
            length = len(attrVersionDict[aIdx])
            for i in range(length-1 , -1, -1):
                #print("latestVersionBefore", attrVersionDict[aIdx][i], attrVersionDict[aIdx][i].rts)
                if attrVersionDict[aIdx][i].rts < ts:
                    return attrVersionDict[aIdx][i]
        return createVersionForPreviousSessionRead(x,attr, None)

    def latestversion(x, attr):
        latestVersionBefore(x, attr, now())

    def addVersionToAttribVersionDictionary(x, attr, v):
        aIdx = x.id + '_' + attr
        if (aIdx not in attrVersionDict):
            attrVersionDict[aIdx] = []
        attrVersionDict[aIdx].append(v)
        return attrVersionDict[aIdx][-1]

    def createVersionForPreviousSessionRead(x, attr, val):
        #print("createVersionForPreviousSessionRead called", x.type)
        v = version.Version(0, 0, val)
        return addVersionToAttribVersionDictionary(x, attr, v)

    def updateVersionAttribDictAtCoord(req, x):
        ##create new version object and add in list of the attribute
        updates = req.worker_attr.get_updated_attr_sub()
        if (len(req.worker_attr.get_updated_attr_res()) >= 1):
            updates = req.worker_attr.get_updated_attr_res()
        print("attr need to be updated", updates)
        for attr, val in updates.items():
            v = version.Version(req.ts, req.ts, val)
            addVersionToAttribVersionDictionary(x, attr, v)

    def findVersionBeforeTs(aIdx, attr, req, resultSet):
        if(aIdx in attrVersionDict):
            for i in range(len(attrVersionDict[aIdx])-1, -1, -1):
                v = attrVersionDict[aIdx][i]
                print(v.rts, v.val)
                if(v.rts <= req.ts and v.val != None):
                    resultSet[attr] = v.val
                    return True
        return False

    def cachedUpdates(x, req):
        #print("CatchedUpdates called for ", x.type)
        defRead = sta.defReadAttr(x, req)
        mightRead = sta.mightReadAttr(x, req)
        uniounAttr = defRead | mightRead
        resultSet = {}
        needDataFromDb = False
        print("uniounAttr",uniounAttr)
        print("attrVersionDict",attrVersionDict)
        for attr in uniounAttr:
            aIdx = x.id+'_'+attr
            if(findVersionBeforeTs(aIdx, attr, req, resultSet) == False):
                needDataFromDb = True

        print(attrVersionDict)
        print("needDataFromDb", needDataFromDb, x.type)
        print("resultSet", resultSet)

        ## Update curr catched attributes ##
        if(x.type == 'sub'):
            req.catched_attr.set_sub_attr(resultSet)
        else:
            req.catched_attr.set_res_attr(resultSet)

        ## read remaining attributes from attribute database ##
        if(needDataFromDb == True):
            send_attr_read_request_to_attr_database(req)
            await(some(received(("reply_db_read", req1)), has=(req1.id == req.id)))
            req.db_attr.set_sub_attr(req1.db_attr.get_sub_attr())
            req.db_attr.set_res_attr(req1.db_attr.get_res_attr())
            update_db_result_with_catched(req)
            #print("cachedUpdates", type(req), req)
        return req

    def restart(req):
        print("In restart")
        send((("restart"), req), to=sta.coord(sta.obj(req, req.rdonlyObj)))

    ##coordinator: on receiving <"restart", req>
    def handleRestartRequest(req):
        #remove context for this req
        req.generateTimeStamp()
        req.reset_attr_objects()
        checkAndHandleRequest(req, 1)

    def checkForConflicts(req, x):
        updates = req.worker_attr.get_updated_attr_sub()
        if (len(req.worker_attr.get_updated_attr_res()) >= 1):
            updates = req.worker_attr.get_updated_attr_res()
        #print("checkForConflicts", updates)
        for attr, val in updates.items():
          # note: if x.attr has not been read or written in this session, then
          # v is the special version with v.rts=0 and v.wts=0.
          v = latestVersionBefore(x, attr,req.ts)
          if v.rts > req.ts:
            return True
        return False

    def handleCurrWriteAndPendingReadReqs(req, i):
        print("currRunningWriteReq before", currRunningWriteReq, req, req.id)
        if (req.id in currRunningWriteReq.keys()):
            currRunningWriteReq.pop(req.id)
            ## Start any pending and not conflicting read request
            startDelayedReadRequest(i)  ##coordinator: on receiving <"result", req> as coord(obj(req,req.updatedObj))
        print("currRunningWriteReq after", currRunningWriteReq, req, req.id)


    def handleWorkerResponseForWriteRequests(req):
        
        # req updates the object that this coordinator is responsible for.
        # check for conflicts.
        x = sta.obj(req,req.updatedObj)

        # check whether there are already known conflicts
        conflict = checkForConflicts(req, x)
        updates = req.worker_attr.get_updated_attr_sub()
        if(len(req.worker_attr.get_updated_attr_res()) >= 1):
            updates = req.worker_attr.get_updated_attr_res()

        if not conflict:
            # wait for relevant pending reads to complete                         #
            # await (forall <attr,val> in req.updates:                            #
            #       latestVersionBefore(x,attr,req.ts).pendingMightRead is empty  #
            #       or contains only an entry for req)                            #
            await (each((attr, val) in updates.items(), has = len(latestVersionBefore(x,attr,req.ts).pendingMightRead) == 0 \
                 or (len(latestVersionBefore(x,attr,req.ts).pendingMightRead) == 1 and \
                 next(iter(latestVersionBefore(x,attr,req.ts).pendingMightRead))) == req.id))

            # check again for conflicts
            conflict = checkForConflicts(req, x)
            if not conflict:
                # commit the updates
                send(('req_db_write', req), to=data)  ## send updates to the attribute database with timestamp req.ts ##
                ##add updates to cachedUpdates and update data structure used by latestVersionBefore
                updateVersionAttribDictAtCoord(req, x)

                # update read timestamps
                uniounAttr = sta.defReadAttr(x,req) | sta.mightReadAttr(x,req)
                for attr in uniounAttr:
                    v = latestVersionBefore(x, attr, req.ts)
                    if(req.id in v.pendingMightRead):
                        v.pendingMightRead.remove(req.id)
                    readAttr = req.worker_attr.read_attr_sub
                    if (not req.worker_attr.updated_attr_sub):
                        readAttr = req.worker_attr.read_attr_res
                    if attr in readAttr:
                        v.rts = req.ts
                ## send <req.id, req.decision> to req.client ##
                send(('result', req), to=req.curr_app)
                # notify coordinator of read-only object that req committed, so it can
                # update read timestamps.
                send (("readAttr", (req, req.rdonlyObj)), to=sta.coord(sta.obj(req, req.rdonlyObj)))

                ## Remove self from current running write reqests and run any pending read requests
                handleCurrWriteAndPendingReadReqs(req, req.updatedObj)
            else:
                restart(req)
        else:
            restart(req)

    #coordinator: on receiving <"readAttr", req, i>
    def handleWorkerResponseForReadRequests(req, i):
        #print("handleWorkerResponseForReadRequests called")
        x = sta.obj(req,i)
        for attr in sta.mightReadAttr(x,req):
            v = latestVersionBefore(x, attr, req.ts)
            #print("handleWorkerResponseForReadRequests",x.type, attr, v)
            if(len(v.pendingMightRead) >= 1 and req.id in v.pendingMightRead):
                v.pendingMightRead.remove(req.id)
            readAttr = (req.worker_attr.read_attr_res, req.worker_attr.read_attr_sub)
            #print("handleWorkerResponseForReadRequests readAttr", readAttr)
            for r in readAttr:
                if attr in r:
                    #print ("handleWorkerResponseForReadRequests", attr)
                    v.rts = req.ts

        ##Remove mightWrite Requests from currentWrite dictionary##
        if(not req.worker_attr.get_updated_attr_sub() and not req.worker_attr.get_updated_attr_res()):
            handleCurrWriteAndPendingReadReqs(req, i)


    # Merging read write flow 
    def handleReqAsCorod1(req):
        print ("in handleReqAsCorod1 req id", req.id)
        x = sta.obj(req,1)
        req.ts = now()
        #print("defRead",sta.defReadAttr(x,req))
        #print("mightRead",sta.mightReadAttr(x, req))

        print("handleReqAsCorod1 before cachedUpdates req id", req.id)
        req = cachedUpdates(x,req)
        print("in handleReqAsCorod1", attrVersionDict)
        print("handleReqAsCorod1 after cachedUpdates req id", req.id)

        if not sta.mightWriteObj(req): ## this is a read only request and mightWriteObj set is empty
            for attr in sta.defReadAttr(x,req):
                latestVersionBefore(x, attr, req.ts).rts = req.ts
        else:
            for attr in sta.defReadAttr(x,req):
                latestVersionBefore(x,attr, req.ts).pendingMightRead.add(req.id)
        for attr in sta.mightReadAttr(x,req):
            #print("handleReqAsCorod1", latestVersionBefore(x, attr, req.ts))
            latestVersionBefore(x, attr, req.ts).pendingMightRead.add(req.id)
        #print(latestVersionBefore(x, attr, req.ts).pendingMightRead)

        ## send req to coord(obj(req,2)) ##
        print("sending handleReq from here for second co-ordinator, req id", req.id)
        #send(('handleReq', (req, 2)), to=sta.coord(sta.obj(req, 2)))
        send(('handleReq', (req, 2)), to=coord_list[0])

    def sendRequestToWorker(req):
        ## choose worker w to evaluate this request ##
        send(('req_cord', req), to=work_list[worker_count % (config.num_workers)])
        worker_count += 1
        print("Work sent to worker")

    # Merging read write flow 
    def handleReqAsCorod2(req):
        print ("in handleReqAsCorod2 req id", req.id)
        x = sta.obj(req, 2)
        
        if not sta.mightWriteObj(req): ## this is a read only request and mightWriteObj set is empty
            for attr in sta.defReadAttr(x,req):
                latestVersionBefore(x, attr, req.ts).rts = req.ts
        else:
            for attr in sta.defReadAttr(x,req):
                latestVersionBefore(x,attr, req.ts).pendingMightRead.add(req.id)
        for attr in sta.mightReadAttr(x,req):
            latestVersionBefore(x,attr, req.ts).pendingMightRead.add(req.id)
        
        ## req.cachedUpdates[2] = cachedUpdates(x,req) ##
        print(" handleReqAsCorod2 before cachedUpdates req id", req.id)
        req = cachedUpdates(x,req)
        print("in handleReqAsCorod2", attrVersionDict)
        print("handleReqAsCorod2 after cachedUpdates req id", req.id)

        ## send req to w ##
        sendRequestToWorker(req)

    def handleRequest(req, req_type):
        req.generateTimeStamp()
        print ("In handle request req id", req.id)
        ##coordinator: on receiving request req as coord(obj(req,1))
        if (req_type == 1):
            handleReqAsCorod1(req)
        ##coordinator: on receiving req as coord(obj(req,2))
        else:
            handleReqAsCorod2(req)

    ### code to prevent starvation and delay r1- begins ###
    def startDelayedReadRequest(i):
        print("startDelayedReadRequest ", pendingReadReq)
        listToRemove = list()
        for reqId, reqObj in pendingReadReq.items():
            if(needDealyToPreventStarvation(reqObj, i) == False):
                listToRemove.append(reqId)
        for reqId in listToRemove:
            reqObj = pendingReadReq[reqId]
            pendingReadReq.pop(reqId)
            handleRequest(reqObj, i)

    def needDealyToPreventStarvation(req, req_type):
        if sta.mightWriteObj(req):
            return False
        ##unioun set of read attributes need to be checked with each running write request mightWriteAttr set
        x = sta.obj(req, req_type)
        defRead = sta.defReadAttr(x, req)
        mightRead = sta.mightReadAttr(x, req)
        uniounAttr = defRead | mightRead
        print("needDealyToPreventStarvation uniounAttr", uniounAttr)
        print("needDealyToPreventStarvation currRunningWriteReq", currRunningWriteReq)
        for reqId, reqObj  in currRunningWriteReq.items():
            print("needDealyToPreventStarvation ",reqId, reqObj.req_type, sta.obj(reqObj, req_type).id, sta.obj(reqObj, req_type).type, \
                    sta.mightWriteAttr(sta.obj(reqObj, req_type), reqObj))
            mightWrite = sta.mightWriteAttr(sta.obj(reqObj, req_type), reqObj)
            print("needDealyToPreventStarvation mightWrite", mightWrite)
            if not (mightWrite & uniounAttr):
                return True
        return False

    def checkAndHandleRequest(req, req_type):
        if(needDealyToPreventStarvation(req, req_type) == False):
            print ("does not need to delay this req", sta.mightWriteObj(req))
            if(sta.mightWriteObj(req) and req.id not in currRunningWriteReq.keys()):
                print("adding in currRunningWriteReq list req id", req.id)
                currRunningWriteReq[req.id] = req
            handleRequest(req, req_type)
        else: ##Need to be delayed till write completion
            print ("need to delay this req")
            if(req.id not in pendingReadReq.keys()):
                pendingReadReq[req.id] = req
    ### code to prevent starvation and delay r1- end ###

    def run():
        while True:
            if (await(some(received(("handleReq", (req, i)))))):
                pass
            elif (some(received(("readAttr", (req, i))))):
                pass
            elif (some(received(("result", req)))):
                pass
            elif (some(received(("restart", req)))):
                pass
            elif (some(received(("reply_db_read", req)))):
                pass
            elif timeout(TIMEOUT * 10):
                output('timeout because of inactivity')

    def receive(msg = (a, (b))):
        output("received req in Coordinator: ", a)
        if(a == "handleReq"):
            #print ("received handleReq message in coordinator")
            print("rishabh")
            v1, v2 = b
            print("received msg in Coordinator", a," with req id", b[0].id)
            checkAndHandleRequest(v1, v2)
        elif(a == "readAttr"):
            #print ("received readAttr message in coordinator")
            print("received msg in Coordinator", a," with req id , ", b[0].id)
            handleWorkerResponseForReadRequests(b[0], b[1])
        elif(a == "result"):
            #print ("received result message in coordinator")
            print("received msg in Coordinator", a, " with req id , ", b.id)
            handleWorkerResponseForWriteRequests(b)
        elif (a == "restart"):
            #print ("received restart message in coordinator")
            print("received msg in Coordinator", a, " with req id , ", b.id)
            handleRestartRequest(b)
        elif (a == "reply_db_read"):
            print("received msg in Coordinator", a, " with req id , ", b.id)
            #print ("recived read attributes from db")
            #update_db_result_with_catched(b)


