import json, sys, os, time
import request
sys.path.insert(0, '../config')
import config
import staticAnalysis
config(clock = 'Lamport')
config(channel = 'fifo')
TIMEOUT = 1

class Client(process):
    def setup(config:Config, coord_list: list, counter: int):
        self.req_queue = []
        output("Client:  Client Setup in done")
        pass

    def reqFactory(type):
        if type == None:
            req = request.HistoryRequest()
        else:
            req = request.DrmRequest(type)
        return req

    def readNextOperation(conf_data):
        output("Client: Fetching Next Request to evaluate policy ,from Config")
        oper = conf_data["operations"][counter]
        req = reqFactory(oper["op"][2].get("type"))
        req.action = oper["op"][0].get("action")
        req.subj_id = oper["op"][1].get("sub-id")
        req.position = oper["op"][1].get("position")
        req.res_id = oper["op"][2].get("id")
        req.req_type = oper["op"][3].get("req_type")
        req.generateReqId(counter)
        print("req created with id", req.id)
        req.set_curr_app(self.id)
        
        ##add request unique id to req id list
        self.req_queue.append(req.id)
        output("Client: A new Evaluation Request is created with req id: ",req.id)
        return req

    def handle_policy_evaluation_result(req):
        if(req.id in self.req_queue):
            print("Got policy evaluation result as",req.result, "for req with req id: ", req.id)
            #print("evaluation result is: ", req.result)
            self.req_queue.remove(req.id)
        else:
            print("Got some random message with req_id ", req.id)

    def run():
        output("Client:  Client started")
        try:
            with open(config.conf_file, encoding='utf-8') as conf:
                ##Need to enable simultaneous read/write in test file to simulate dynamic user requests##
                conf_data = json.loads(conf.read())
                num_operations =  len(conf_data["operations"])
                sta = staticAnalysis.StaticAnalysis(config.attr_file, coord_list)
                time.sleep(1)
                while(counter < num_operations):
                    output("Client: Client fetches next policy evaluation request #:" ,counter)
                    req = readNextOperation(conf_data)
                    counter = counter + config.num_client

                    output("Client: Forward policy evaluation request to First Coordinator for req id", req.id)
                    send(('handleReq', (req, 1)), to = sta.coord(sta.obj(req, 1)))

                    #--handle_policy_evaluation_results
                    
                    if(await(some(received(('result', req))))):
                        pass
                        #output("Client: Policy Evaluation result received")
                    elif timeout(TIMEOUT * 0.1):
                        pass

            while len(req_queue) > 0:
                #print("waiting for policy result in Client")
                if (await(some(received(('result', req))))):
                    #output("Client: Policy Evaluation result received")
                    pass
                elif timeout(TIMEOUT * 1):
                    pass
                    #print("timeout while waiting for co-ordinator responses")
            output("Client: All Evaluation requests for this Client are over")        

        except ImportError:
            output("Client: Error in read file", sep = "|")

    def receive(msg=(a,b)):
        output("Client: received policy evaluation")
        if(a == "result"):
            handle_policy_evaluation_result(b)
            
            
