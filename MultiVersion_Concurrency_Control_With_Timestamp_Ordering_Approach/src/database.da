import sys, os, json
config(clock='Lamport')
config(channel='fifo')
TIMEOUT = 1

class Database(process):
    def setup(data_file: str):
        self.attributeStore = dict()
        self.attributeStore["resources"] = dict()
        self.attributeStore["subjects"] = dict()
        # check error in loading pre init config file for the database
        if getDataFromFile() == False:
            sys.exit(-1)

    def create_new_version(req):
        # to create a new dict element , versions and return it. #
        v = dict()    
        v["v_ts"] = req.ts
        if(req.worker_attr.get_updated_attr_sub() != None):
            for k, val in req.worker_attr.read_attr_sub.items():
                v[k] = val
            for k, val in req.worker_attr.updated_attr_sub.items():
                v[k] = val
        else:  # res updated
            for k, val in req.worker_attr.read_attr_res.items():
                v[k] = val
            for k, val in req.worker_attr.updated_attr_res.items():
                v[k] = val
        return v

    def handleupdate(req):
        # need to write the received update to db..
        output("Database: Database received write request to update attributes for Id:",req.subj_id)

        # check if sub has updated or res #
        v = create_new_version(req)

        if(req.worker_attr.get_updated_attr_sub() != None):
            if(self.attributeStore["subjects"].get(req.subj_id) is None):
                self.attributeStore["subjects"][req.subj_id] = []
            self.attributeStore["subjects"].get(req.subj_id).append(v)
            output("Database: Database write request completed for sub Id:", req.subj_id)
        else:
            if(self.attributeStore["resources"].get(req.res_id) is None):
                self.attributeStore["resources"][req.subj_id] = []
            self.attributeStore["resources"].get(req.sub_id).append(v)
            output("Database: Database write request completed for res Id:",req.res_id)
        

    def handleQuery(req):
        # read req query , fetch from dicts and send back a reply to the node which sent the query(how to get target node??)
        output("Database: Received a query for with ts :", req.subj_id, req.ts)

        version_list = self.attributeStore["subjects"][req.subj_id]
        output("version_list subj in database is ", version_list)
        index = -1
        for i in range(0,len(version_list)):
            ts = version_list[i].get("v_ts")
            if(float(ts) < float(req.ts)):
                index = i
                break
        if(index != -1):
            subj_attribs = dict()
            for k, v in version_list[i].items():
                if k != "v_ts":
                    subj_attribs[k] = v
        req.db_attr.set_sub_attr(subj_attribs)

        version_list = self.attributeStore["resources"][req.res_id]
        output("version_list res in database is ", version_list)
        index = -1
        for i in range(0,len(version_list)):
            ts = version_list[i].get("v_ts")
            if(float(ts) < float(req.ts)):
                index = i
                break
        if(index != -1):
            res_attribs = dict()
            res_attribs["id"] = req.res_id
            for k, v in version_list[i].items():
                if k != "v_ts":
                    res_attribs[k] = v
        req.db_attr.set_res_attr(res_attribs)

        send(('reply_db_read', req), to=req.curr_coordinator)
        output("Database : Message sent to curr_coordinator back after database fetch")

    def getDataFromFile():
        if not os.path.exists(data_file):
            output("Database: preInit Config file %s not found" % data_file)
            return -1
        try:
            fileData = json.loads(open(data_file).read())
            output("Database: Loading entries from JSon file to local memory to simulate DB")
            for subjects in fileData.get("subjects"):
                item = subjects.get("sub-id")
                version = subjects.get("version")
                self.attributeStore["subjects"][item] = version
            for resources in fileData.get("resources"):
                item = resources.get("id")
                version = resources.get("version")
                self.attributeStore["resources"][item] = version
            output("Loading Datasbe entries in JSon file complete, DB Simulator Ready")
            return True

        except:
            output("Database: Json file not in correct syntax")
            return False

    def run():
        while True:
            # clk = logical_clock()
            if (await(some(received(('req_db_read', req))))):
                pass
                # print("database received a req to read")
                # handleQuery(req)
            elif (some(received(('req_db_write', req)))):
                pass
                # print("database received a req to write")
                # handleupdate(req)
            elif timeout(TIMEOUT * 10):
                pass


    def receive(msg=(a, b)):
        output("received req in Database: ", a)
        if a == "req_db_read":
            handleQuery(b)
        elif a == "req_db_write":
            handleupdate(b)